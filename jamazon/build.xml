<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://oss.oracle.com/licenses/CDDL+GPL-1.1
    or LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project name="Amazon Web Services Rich Client" default="run" basedir=".">

  <!-- use "env" as a prefix for enviroment variables -->
  <property environment="env"/>
  <property file="build.properties"/>

  <!-- local directories -->
  <property name="dir-src" value="src"/>
  <property name="dir-build" value="build/classes"/>
  <property name="dir-javadoc" value="build/javadoc"/>
  <property name="dir-lib" value="lib"/>
  <property name="dir-dist" value="dist"/>

  <!-- library directories -->
  <property name="dir-jwsdp" location="${jwsdp.home}"/>
  <property name="dir-jaxp" location="${dir-jwsdp}/jaxp"/>
  <property name="dir-jaxrpc" location="${dir-jwsdp}/jaxrpc"/>
  <property name="dir-saaj" location="${dir-jwsdp}/saaj"/>
  <property name="dir-jwsdp-shared" location="${dir-jwsdp}/jwsdp-shared"/>

  <!-- File names -->
  <property name="file-keystore" location="${dir-build}/jam_keystore"/>

  <!-- Release name -->
  <property name="bundle-name" value="${release.name}-${release.no}-${release.level}"/>
  <property name="bundle-zip" value="${dir-dist}/${bundle-name}.zip"/>
  <property name="bundle-tar" value="${dir-dist}/${bundle-name}.tar.gz"/>

  <!-- Setup the classpath - all the files in the Soap lib directory -->

  <path id="classpath.lib">
    <fileset dir="${dir-jaxrpc}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${dir-saaj}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${dir-jwsdp-shared}/lib">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="classpath.jaxp">
    <fileset dir="${dir-jaxp}/lib">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <taskdef name="wscompile" classname="com.sun.xml.rpc.tools.ant.Wscompile">
    <classpath refid="classpath.lib"/>
  </taskdef>

  <target name="prepare" description="Prepares the build">
    <available property="keystore.present" file="${file-keystore}"/>
    <mkdir dir="${dir-build}"/>
    <mkdir dir="${dir-dist}"/>
    <copy todir="${dir-build}">
      <fileset dir="${dir-src}" includes="**/resources/**"/>
    </copy>
  </target>

  <target name="clean" description="Cleans all the artifacts of the build process">
    <delete dir="${dir-build}"/>
    <!-- delete the generated source -->
    <delete dir="${dir-src}/myamazonclient"/>
    <delete dir="${dir-dist}"/>
  </target>

  <!-- Generates the Java stubs using JAX-RPC RI. -->
  <!-- Note: This target assumes that it will be invoked behind a firewall. -->
  <!-- the httpproxy attribute may need to be removed or generalized to be optional -->
  <target name="generate-stubs" depends="prepare" 
    description="Runs wscompile to generate the client stub classes">
    <echo message="Running wscompile...."/>
    <wscompile keep="true" client="true"
      base="${dir-build}"
      sourceBase="${dir-src}"
      httpproxy="${proxy.host}:${proxy.port}"
      config="compile-config.xml">
      <classpath>
	<path refid="classpath.lib"/>
      </classpath>
    </wscompile>
  </target>

  <!-- This target really depends on generate-stubs -->
  <target name="compile" depends="prepare" 
    description="Compiles classes. Run generate-stubs first">
    <javac srcdir="${dir-src}" destdir="${dir-build}" debug="on"
      classpathref="classpath.lib"/>
  </target>

  <!-- Creates the development bundle -->
  <target name="dist" depends="clean">
    <copy todir="${dir-dist}/${bundle-name}">
      <fileset dir="." includes="jamazon.jnlp, *.txt, build.*, *.xml"/>
      <fileset dir="." includes="src/**" excludes="**/myamazonclient/**"/>
    </copy>
    
    <!-- This is the redistributable bundle -->
    <!-- create the distribution bundles -->
    <zip destfile="${bundle-zip}" basedir="${dir-dist}" excludes="*.zip, *.tar.gz"/>
    <tar destfile="${bundle-tar}" basedir="${dir-dist}" excludes="*.zip, *.tar.gz"
      compression="gzip"/>
  </target>

    
  <!-- Creates the keystore for jar signing. Should only generate this once. -->
  <target name="keystore" unless="keystore.present">
    <genkey alias="jamazon" storepass="jamazon" keystore="${file-keystore}"
      dname="CN=Anonymous Signature, OU=unknown, O=unknown, C=unknown"/>
  </target>

  <!-- Creates the deployment bundle by signing jar files and web files. -->
  <target name="deploy" depends="clean, generate-stubs, compile, keystore" 
    description="creates the deployment bundle">
    
    <jar jarfile="${dir-dist}/jamazon.jar"
      basedir="${dir-build}"
      excludes="**/demo/**,*Demo.class,**/test/**,test*.class"/>
    
    <copy todir="${dir-dist}">
      <fileset dir="${dir-jaxrpc}/lib">
	<include name="**/*.jar"/>
      </fileset>
      <fileset dir="${dir-saaj}/lib">
	<include name="**/*.jar"/>
      </fileset>
      <fileset dir="${dir-jwsdp-shared}/lib"
	includes="activation.jar, mail.jar, jax-qname.jar"/>
    </copy>
	
    <!-- Java Web Start Deployment -->
    <copy todir="${dir-dist}" overwrite="true" file="jamazon.jnlp">
      <filterset>
	<filter token="deploy.host" value="${deploy.host}"/>
      </filterset>
    </copy>

    <signjar alias="jamazon" storepass="jamazon" keystore="${file-keystore}">
      <fileset dir="${dir-dist}" includes="**/*.jar"/>
    </signjar>
    
    <zip zipfile="${dir-dist}/jamazon-deploy-bundle.zip" 
      basedir="${dir-dist}"
      excludes="*.zip, *.tar.gz"/>
  </target>

  <target name="javadoc" depends="compile" description="Generate the javadoc for the project">
    <mkdir dir="${dir-javadoc}"/>
    <javadoc source="1.4" packagenames="com.sun.jamazon.*"
      excludepackagenames="myamazonclient.AmazonClientGenClient.*"
      sourcepath="${dir-src}"
      destdir="${dir-javadoc}">
      <classpath>
	<pathelement location="${dir-build}"/>
	<path refid="classpath.lib"/>
      </classpath>
    </javadoc>
  </target>

  <target name="test" description="Runs all the JUnit tests...">
    <echo message="JUnit tests not implemented yet..."/>
  </target>

  <target name="run" depends="generate-stubs, compile" description="Runs the Jamazon client">
    <java classname="com.sun.jamazon.JAmazon" fork="true">
      <classpath>
	<pathelement location="${dir-build}"/>
	<path refid="classpath.lib"/>
      </classpath>
      <!-- should add proxies if needed -->
      <jvmarg value="-Dhttp.proxyHost=${proxy.host}"/>
      <jvmarg value="-Dhttp.proxyPort=${proxy.port}"/>
      <!-- JWSDP uses Xerces -->
      <jvmarg value="-Djava.endorsed.dirs=${dir-jaxp}/lib/endorsed"/>
    </java>
  </target>

</project>
